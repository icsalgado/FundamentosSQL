SQL - MySQL 

Registros - são como as fichas físicas
Tabelas - são como as pastas físicas
Arquivos - são como os armários

Arquivos guardam tabelas, tabelas armazemam registros

SGBD - DMS - sistema gerenciador de banco de dados - database manage system

DDL - linguagem de definicção
DML - manipulação
DQL - Solicitações
DCL - controle
DTL - transações

Principios DICA - 
Durabilidade > dados permanecem duraveis
Isolamento > transações não podem interferir em outras
Concistencia > Levar do BD de um estado consistente a outra
Atomicidade > Ou tudo da certo ou não altera nada

Banco de dados
	tabelas	
		registros
			campos
		
CREATE DATABASE cadastro;
USE cadastro;
CREATE TABLE pessoas();
DESCRIBE pessoas;
DROP DATABASE cadastro;

no terminal:
	show databases;
	use cadastro;
	status;
	show tables;
	describe pessoas;
	exit;


Tipos de dados primitivos:
Numeros
	inteiros
		varios tipos com diferença de uso de bytes
			TinyInt, SmallInt, Int, MediumInt, BigInt
	reais
			Decimal, Float, Double, Real
	logico
			bit, boolean
Data e tempo
			Date, DateTime, TimeStamp, Time, Year
literais
	caracteres
			char, VarChar
	texto
			TinyText, Text, MediumText, LongText
	binario
			TinyBlob, Blob, MediumBlob, LongBlob
	coleções
			Enum, Set
espacial
			Geometry, Point, Plygon, MultiPolygon
			
__________________________________________________			
			
Melhorando o banco de dados:

CREATE DATABASE cadastro
DEFAULT CHARACTER SET utf8
DEFAULT COLLATE utf8_general_ci;

Melhorando a tabela com constraints(restrições de integridade)

CREATE TABLE pessoas (
id int NOT NULL AUTO_INCREMET,
nome vachar(30) NOT NULL,
nascimento date,
sexo enum('M', 'F'),
peso decimal(5,2), //5 total de casas, 2 casas depois da virgula
altura decima(3,2),
nacionalidade var(20) DEFAULT 'Brasil",
PRIMARY KEY (id)
)DEFAULT CHARSET utf8;

_________________________________________________________________

DDL - são parte da definição da estrutura do banco de dados. Data definition language
	CREATE DATABASE
	CREATE TABLE
	ALTER TABLE
	DROP TABLE

INSERT INTO pessoas
(id, nome, nascimento, sexo, peso, altura, nacionalidade)
VALUES
('1', 'Iuri', '1991-02-02', 'M', '80.0', '1.72', 'Brasil');

//como o id foi configurado como auto increment, não precisa ser definido

DML - data manipulation language
	INSERT INTO
	
describe ou desc pessoas; //para exibir as colunas da tabela
alter table pessoas //para fazer alterações na tabela
add column profissao varchar(10); //para adicionar uma coluna 

alter table pessoas
drop column profissao; //para dropar, remover a coluna

alter table pessoas
add column profissao varchar(10) after nome;// adiciona a coluna depois da coluna nome (before não existe, para colocar como primeiro usar o first) 

alter table pessoas
add codigo int FIRST;//adiciona a coluna codigo no inicio (column não é obrigatório)

alter table pessoas
modify column profissao varchar(20) not null default '';//aumenta o tamanho do registro configura como não nulo e coloca o default vazio para não ter conflito de constraits

alter table pessoas
change column profissao prof varchar(20);//para mudar o nome da coluna

alter table pessoas
rename to gafanhotos;// para modificar o nome da tabela

create table if not exists cursos( //cria se ja não existir
nome varchar(20) not null unique, // unique impede se exista outro campo com o mesmo nome
descricao text,
carga int unsigned, //unsigned é sem sinal, a carga horaria nao pode ser negativa
totaulas int,
ano year default '2016'
)default charset =utf8;

alter table cursos
add column idcurso int first;//adicionando uma coluna para ser colocada como chave primaria

alter table cursos
add primary key (idcurso);//configurando como chave primaria

drop table cursos; //apagar tabela 

______________________________________________________________________________________

//manipulação de registros, linhas ou tuplas

UPDATE cursos                  DML
SET nome = 'HTML5'
WHERE idcurso = '1';


update cursos
set nome = 'Java', carga = '40', ano = '2015'
where idcursos = '5'
limit 1; //limita alteração em um registro

delete from cursos                     DML
where idcursos = '8';

truncate table cursos; //apaga todos os registros / truncar registros         DML

______________________________________________________________________________________

//backup ou dump em banco de dados

server > export
server > import

_______________________________________________________________________________________

//usando PHPMyAdmin

_______________________________________________________________________________________

DML ou DQL(data query language) - select

select * from cursos
order by nome desc; //nesse caso desc é descendent

select nome, carga, ano from cursos
order by nome asc; 

select nome, carga, ano from cursos
order by ano, nome;

select * from cursos
where ano = '2016'
order by nome;

select * from cursos
where ano <= '2016' //todos os operadores relacionais funcionam
order by ano, nome;

select * from cursos
where ano <= '2016' && carga >= '40' //operadores lógicos também funcionam (AND OR)
order by ano, carga, nome;


select * from cursos
where ano between 2014 and 2016 //entre
order by ano desc, carga asc, nome;


select * from cursos
where ano in (2014, 2016) //valores especificos
order by ano desc, carga asc, nome;

________________________________________________________________________________

select * from cursos
where nome like 'P%'; // todas as ocorrencias que começam com P

select * from cursos
where nome like '%a'; //terminados em a - não faz diferença a ou A

% substitui nenhum ou varios caracteres


select * from cursos
where nome not like '%a%';//seleciona ocorrencias que não tem nunhuma letra a


select * from cursos
where nome like 'ph%p%';//começaa com ph e termina com p


select * from cursos
where nome like 'ph%p_'; //começa com ph, termina com p e mais um caracter

_ representa quantos caracteres tem que ter


select distinct carga from cursos
order by carga; //seleciona as ocorrencias distintas


select count(*) from cursos;//conta os registros todos


select count(*) from cursos
where carga > '40';//conta todos registros onde a carga seja maior que 40


select max(carga) from cursos;//seleciona a maior carga


select min(carga) from cursos;//minimo

select sum(carga) from cursos;//somatorio das cargas

select avg(carga) from cursos;//media das cargas

Exercicios:
	lista de todos os gafanhotos femeas
	lista dados que nasceram entre 01/01/2000 e 31/12/2015
	lista de homens programadores
	listas dados de mulheres braseileiras com nome começando com J
	Lista com nome e nacionalidade de homens que tem silva no nome extrangeiros e pesam menos de 100kg
	maior altura entre gafanhotos homens brasileiros
	media de peso de todos os gafanhotos
	menor peso das mulheres extrangeiras que nasceram entre 01/01/1990 e 31/12/2000
	gafanhotas que tem mais de 1.90 de altura

_______________________________________________________________________________________


select carga, count(nome) from cursos
group by carga; // agrupadas as cargas e exibindo a quantidade de nomes atrelados a elas


select carga, count(*) from cursos
group by carga
having count(nome) > 3; //agrupa apenas quem tem o contador maior que 3


select ano, count(*) from cursos
group by ano
having count(count) >= 5 //agrupa todos tendo contagem de nome >= 5
order by count(*) desc;


select carga, count(*) from cursos
where ano > 2015
group by carga
having carga > (select avg(carga) from cursos);//selecionar agrupar e mostrar apenas quem está acima da media da carga dos cursos

exercicio:
	lista com profissões de gafanhotos e seus quantitativos
	quantos homens e mulhes nasceram depois de 01/01/2005
	lista gafanhotos estrangeiros mostrando pais de origem e quantas pessoas moram la, mostrar apenas paises que tenham mais de 3 pessoas morando la
	lista agrupada pela altura com pessoas que pesam mais de 100kg e que estão acima da média de altura dos gafanhotos
___________________________________________________________________________________________

Relacionamento de tabelas - Modelo relacional

Entidade é como se fosse um contauner onde são colocados dados sobre alguma pessoa ou coisa
Os dados são os chamados Atributos
Toda entidade possui uma coleção de atributos de cada registro/tupla

DER - diagrama entidade-relacionamento, como o diagrama está sendo aplicado no banco de dados

Cardinalidade - é o tipo de relacionamento de cada registro (1 N, 1 1, N N)

No relacionamento 1 para 1 - A entidade dominante recebe a chave primaria da outra entidade e a torna uma chave estrangeira (posso escolher a entidade dominante)

No relacionamento 1 para n - A chave primaria do lado 1 vai para o n como chave estrangeira

No relacionamento n para n - O relacionamento vira uma terceira entidade com seus priprios atributos e os n ficam nesta nova entidade. Ela recebe a chave primaria de cada uma das outras entidade e cria duas chaves estrangeiras.

___________________________________________________________________________________________

Egine
	MySAM
	InnoDB -uso de chaves estrangeiras
	XtraDB

	A inno e a xtra tem suporte a transações
	ACID
		A - atômicidade - ou tudo acontece ou nada é considerado
		C - consistência - após a transação tudo tem que estar como estava
		I - Isolamento - duas transações em paralelo devem ser consideradas isoladamente
		D - durabilidade - a transação precisa durar o tempo necessário

alter table gafanhotos
add column cursopreferido int; //cria coluna

alter table gafanhotos
add foreign key (cursopreferido) //chave estrangeira na coluna
references cursos(idcurso); //com referencia a outra tabela

select * from gafanhotos;
select * from cursos;

update gafanhotos set cursopreferido = '6'
where id = '1';

select gafanhotos.nome,
gafanhotos.cursopreferido,
cursos.nome,
cursos.ano
from gafanhotos join cursos //igual ao inner join
on cursos.idcurso = gafanhotos.cursopreferido; 

select gafanhotos.nome,
gafanhotos.cursopreferido,
cursos.nome,
cursos.ano
from gafanhotos left outer join cursos //dando preferencia para o lado esquerdo. pode ser left join
on cursos.idcurso = gafanhotos.cursopreferido;

____________________________________________________________________________________________________

create table aluno_assiste_curso ( //cria a tabela do relacionamento muitos para muitos
id int NOT NULL auto_increment,
data date,
idgafanhoto int,
idcurso int,
primary key (id),
foreign key (idgafanhoto) references gafanhotos(id), //cria as referencias
foreign key (idcurso) references cursos(idcurso)
) default charset = utf8;

insert into aluno_assiste_curso values
(default, '214-03-01', '1', '2'); // data, idgafanhotos, idcurso

select * from aluno_assiste_curso;

select gafanhotos.nome, cursos.nome from gafanhotos 
join aluno_assiste_curso
on gafanhotos.id = aluno_assiste_curso.idgafanhoto
join cursos
on cursos.idcurso = aluno_assiste_curso.idcurso;